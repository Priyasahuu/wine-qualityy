# -*- coding: utf-8 -*-
"""WINE  QUALITY PREDICTION RANDOM FOREST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g1pApgi0dWlbzmx0DXEFBtBuf4E1ac5T

IMPORTING THE DEPENDENCIES
"""""


import pickle
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

"""DATA COLLECTION

"""

#loading the dataset to pandas DataFrame
wine_dataset = pd.read_csv('winequality-red.csv')

#number of rows and columns in a dataset
wine_dataset.shape

wine_dataset.head()



#checkin gfor the missing values
wine_dataset.isnull().sum()

"""DATA ANALYSIS AND VSUZLIZATION"""

wine_dataset.describe()

#number of values for each quality
sns.catplot(x='quality',data=wine_dataset,kind='count')

#volatile_acidity vs quality
plot=plt.figure(figsize=(5,5))
sns.barplot(x='quality' , y='volatile acidity',data=wine_dataset)
#

#comparing citric acide contents
plot=plt.figure(figsize=(5,5))
sns.barplot(x='quality' , y='citric acid',data=wine_dataset)

"""CORRELATIO
first-> postive correlation
seccond ->negative correlation
"""

correlation = wine_dataset.corr()
#constructingf a heat map to understand the correlation between the  columns
plt.figure(figsize=(10 , 10))
sns.heatmap(correlation , cbar=True , square=True , fmt='.1f' , annot=True , annot_kws={'size':8} , cmap='Blues')

"""DATA  PREPROCESSING"""

#separate the dta nad label

X= wine_dataset.drop('quality' , axis=1)
print(X)

"""Label Binarization"""

Y= wine_dataset['quality'].apply(lambda y_value:1 if y_value>=7 else 0)
print(Y)

"""TRIAN AND TEST DATA

"""

X_train , X_test , Y_train , Y_test= train_test_split(X, Y , test_size=0.2 , random_state=2)
print(X.shape , X_train.shape , X_test.shape)

"""random forest classifier model

"""

model = RandomForestClassifier()

model.fit(X_train , Y_train)

"""Model evaluation
acuracy score value
"""

#accuracy on test data
X_test_prediction= model.predict(X_test)

test_data_accuracy=accuracy_score(X_test_prediction , Y_test)
print( 'accuracy :' , test_data_accuracy)

# """BUILDING A PREDICTIVE SYSTEM"""

# input_data=(7.3 , 0.65 , 0.0 , 1.2 , 0.065 , 15.0 , 21.0 , 0.9946 , 3.39 ,0.47 ,10.0 )

# #changing the input data  to numpy array
# input_data_as_numpy_array=np.asarray(input_data)
# #reshape the numpy array
# input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

# prediction=model.predict(input_data_reshaped)
# print(prediction)

# if (prediction[0]==1):
#   print('good quality wine')
# else:
#   print('bad quality wine')
  # ... (your existing model training and evaluation code) ...

# --- ADD THESE LINES TO SAVE YOUR TRAINED MODEL ---
 # Make sure this import is at the top of your file
model_filename = 'random_forest_model.pkl'
with open(model_filename, 'wb') as file:
    pickle.dump(model, file)
print(f"Model saved successfully as {model_filename}")